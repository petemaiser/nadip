The "nadip" command line tool enables the user to "download" all the settings from a NAD processor
or receiver into a nadip settings file that can be "uploaded" to another processor to replace all
the settings on that processor.  Or the settings file can be saved as a backup.  A single command
can also be sent on the command-line.

This program was quickly written in Objective C via reusing components from the
iOS app DTrol https://itunes.apple.com/us/app/dtrol/id1296670853

This program is comes with NO WARRANTY and is a beta version.
You use this program at your own risk.

Copyright (C) 2018 Pete Maiser.

How to Use:
- you must compile this program on your computer to run it
- cd to your desired directory
- clone project from GitHub via your preferred method
- then, for example, to compile in Xcode:
    - “Open a project or file” and open the Xcode file (.xcodeproj)
    - go to "Product" and "Build for Running"
    - go to "Show Build Folder in Finder"
    - navigate to find the compiled program as 'nadip'
    - copy the program to some more convenience place on your computer

Program Usage:
    nadip  [-l log_file] [-p put_file] [-s settings_file]
           [-w milliseconds] IP_address IP_port [put_command_string]

    example
    ../nadip -l settings.tuner.log -p settings.tuner.txt -w 50 192.168.0.90 4999

    -l  Option for all received data to be appended to a provided log filename.  The log file is
        different from settings file in that it logs everything received from the processor,
        no more, no less.  The log file 'records' for a brief time period after nadip has
        sent its last command.  If neither the 'l' option or the 's' option is used
        responses will be discarded.

    -p	Option to put all the commands to the server from the provided put filename.
        Note that a line that starts with '#' is skipped, except '#!', which is a put file
        command.  If option 'p' is not used then a put command must be supplied as the last
        argument.  Supported '#!' commands are:

            #!p<milliseconds>   pause for the given milliseconds,
                                e.g. "#!500" pauses for half a second

    -s	Option to appended the responses to a provided settings filename.  NAD responses like
        "Main.Power=On" can be sent as commands, so the settings option simply takes the
        responses from recieved data or put file and saves them to the settings file.  Note
        that put file commands like '#!p' are moved over to the settings file.  The 's'
        option must be run with the 'p' option OR with a single command sent as an
        argument.  If neither the 'l' option or the 's' option is used the responses will be
        discarded.  The log file records for a brief time period second after nadip has sent
        its last command.  Responses that are skipped (because they are not settings):

            Main.Model
            Main.Version
            Main.Serial

    -w  Option to wait for provided seconds after one command and before starting the
        next command.  For Release 1, when using putting a "settings" file to NAD processor it
        is recommended to use the 'w'option with '50' to put 50 milliseconds between commands.

    IP_address	The IP address, e.g. "10.0.1.10" is the first argument and must be supplied

    IP_port 	The port number, e.g. '4999' is the second argument and must be supplied

    put_command_string  An optional command string will be sent to the processor.  If a put file
        is also included the put file commands will be run first.  If no command string is
        supplied then the 'p' command must be used.
  
Release Updates:

    Release 1.0
        - Initial build.  The program does not enable validated feedback for
          any commands.  When creating a 'settings' file it records data received within
          a brief time period after executing all commands.
        - When putting a "settings" file to NAD processor it is recommended to use the 'w'
          option with '50' to put 50 milliseconds between commands.
